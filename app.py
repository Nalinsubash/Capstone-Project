{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77bd4129-5fb4-4834-9b3a-d3f20e4a89eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import cv2\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import load_model\n",
    "import requests\n",
    "import tensorflow as tf\n",
    "import os\n",
    "\n",
    "# üîπ Replace with your actual Google Drive FILE ID\n",
    "FILE_ID = \"1X23YzabcdeFGHijkLMNOPQ\"\n",
    "MODEL_PATH = \"emotion_CNN_Final_model.h5\"\n",
    "\n",
    "# üîπ Google Drive Direct Download Link\n",
    "GDRIVE_URL = f\"https://drive.google.com/uc?id={FILE_ID}\"\n",
    "\n",
    "# üîπ Download Model if Not Exists\n",
    "if not os.path.exists(MODEL_PATH):\n",
    "    print(\"‚è≥ Downloading Model from Google Drive...\")\n",
    "    response = requests.get(GDRIVE_URL, stream=True)\n",
    "    with open(MODEL_PATH, \"wb\") as f:\n",
    "        for chunk in response.iter_content(chunk_size=1024):\n",
    "            if chunk:\n",
    "                f.write(chunk)\n",
    "    print(\"‚úÖ Model Downloaded Successfully!\")\n",
    "\n",
    "# üîπ Load Model\n",
    "model = tf.keras.models.load_model(MODEL_PATH)\n",
    "print(\"‚úÖ Model Loaded Successfully!\")\n",
    "\n",
    "\n",
    "\n",
    "# Class labels\n",
    "class_labels = [\"angry\", \"disgust\", \"fear\", \"happy\", \"neutral\", \"sad\", \"surprise\"]\n",
    "\n",
    "# Streamlit UI\n",
    "st.title(\"üòÉ Emotion Detection\")\n",
    "st.write(\"Upload an image or turn on your webcam for real-time emotion detection!\")\n",
    "\n",
    "# Select mode\n",
    "mode = st.radio(\"Choose an option:\", (\"üì∑ Use Webcam\", \"üìÇ Upload an Image\"))\n",
    "\n",
    "# Function to predict emotion\n",
    "def predict_emotion(frame):\n",
    "    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Convert to grayscale\n",
    "    resized = cv2.resize(gray, (48, 48))  # Resize to model input size\n",
    "    img_array = np.expand_dims(resized, axis=(0, -1))  # Add batch & channel dimensions\n",
    "    img_array = img_array / 255.0  # Normalize\n",
    "    predictions = model.predict(img_array)\n",
    "    predicted_label = class_labels[np.argmax(predictions)]\n",
    "    return predicted_label\n",
    "\n",
    "# -----------------------\n",
    "# üìÇ Option 1: Upload Image\n",
    "# -----------------------\n",
    "if mode == \"üìÇ Upload an Image\":\n",
    "    uploaded_file = st.file_uploader(\"Upload an image\", type=[\"jpg\", \"png\", \"jpeg\"])\n",
    "\n",
    "    if uploaded_file is not None:\n",
    "        # Convert uploaded file to OpenCV format\n",
    "        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)\n",
    "        frame = cv2.imdecode(file_bytes, 1)\n",
    "\n",
    "        # Show original image\n",
    "        st.image(frame, channels=\"BGR\", caption=\"Uploaded Image\")\n",
    "\n",
    "        # Predict emotion\n",
    "        emotion = predict_emotion(frame)\n",
    "        st.subheader(f\"Predicted Emotion: **{emotion}**\")\n",
    "\n",
    "# -----------------------\n",
    "# üì∑ Option 2: Use Webcam\n",
    "# -----------------------\n",
    "elif mode == \"üì∑ Use Webcam\":\n",
    "    st.write(\"Click 'Start' to capture from your webcam.\")\n",
    "\n",
    "    cam = cv2.VideoCapture(0)  # Open webcam\n",
    "\n",
    "    if st.button(\"Start Webcam\"):\n",
    "        while cam.isOpened():\n",
    "            ret, frame = cam.read()\n",
    "            if not ret:\n",
    "                st.error(\"Failed to capture image from webcam.\")\n",
    "                break\n",
    "\n",
    "            # Predict emotion\n",
    "            emotion = predict_emotion(frame)\n",
    "\n",
    "            # Show webcam feed\n",
    "            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
    "            st.image(frame, channels=\"RGB\", caption=f\"Predicted Emotion: {emotion}\")\n",
    "\n",
    "            # Stop the webcam when user clicks \"Stop\"\n",
    "            if st.button(\"Stop Webcam\"):\n",
    "                cam.release()\n",
    "                break\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
